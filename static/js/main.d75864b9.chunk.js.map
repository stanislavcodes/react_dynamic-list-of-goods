{"version":3,"sources":["GoodsList.tsx","api/goods.ts","App.tsx","index.tsx"],"names":["GoodsList","goods","map","good","id","color","name","style","getAll","delay","Promise","resolve","setTimeout","then","fetch","response","json","GoodsType","get5First","sort","currentGood","nextGood","localeCompare","slice","getRedGoods","filter","App","useState","setGoods","Default","currentGoodsType","setCurrentGoodsType","isLoading","setIsLoading","isLoadingError","setIsLoadingError","getLoadHandler","getGoods","goodsType","catch","finally","className","type","onClick","All","FirstFive","OnlyRed","ReactDOM","render","document","getElementById"],"mappings":"sNAOaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,6BACGA,EAAMC,KAAI,SAAAC,GACT,IAAQC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,KAEnB,OACE,oBAEE,UAAQ,OACRC,MAAO,CAAEF,SAHX,SAKGC,GAJIF,SCLR,SAASI,IACd,OALYC,EAKA,IAJL,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,OAKjDI,MAAK,kBAAMC,MARH,4EASRD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,UAP/B,IAAcP,EAUP,ICNFQ,EDMQC,EAAY,WACvB,OAAOV,IACJK,MAAK,SAACZ,GAAD,OAAWA,EACdkB,MAAK,kBAASC,EAAT,EAAGd,KAA6Be,EAAhC,EAA0Bf,KAA1B,OACJc,EAAYE,cAAcD,MAE3BE,MAAM,EAAG,OAGHC,EAAc,WACzB,OAAOhB,IACJK,MAAK,SAACZ,GAAD,OAAWA,EAAMwB,QAAO,kBAAyB,QAAzB,EAAGpB,a,gBCjBhCY,O,qBAAAA,I,aAAAA,I,yBAAAA,I,sBAAAA,M,KAOE,IAAMS,EAAgB,WAC3B,MAA0BC,mBAAiB,IAA3C,mBAAO1B,EAAP,KAAc2B,EAAd,KACA,EAAgDD,mBAASV,EAAUY,SAAnE,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAkCJ,oBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KAEMC,EAAiB,SACrBC,GAEI,IADJC,EACG,uDADSrB,EAAUY,QAEtB,OAAO,WACDC,IAAqBQ,IACvBL,GAAa,GACbE,GAAkB,GAClBE,IACGxB,KAAKe,GACLW,OAAM,kBAAMJ,GAAkB,MAC9BK,SAAQ,kBAAMP,GAAa,MAC9BF,EAAoBO,MAK1B,OACE,sBAAKG,UAAU,MAAf,UACE,uDAEA,wBACEC,KAAK,SACL,UAAQ,aACRC,QAASP,EAAe5B,EAAQS,EAAU2B,KAH5C,4BAQA,wBACEF,KAAK,SACL,UAAQ,oBACRC,QAASP,EAAelB,EAAWD,EAAU4B,WAH/C,gCAQA,wBACEH,KAAK,SACL,UAAQ,aACRC,QAASP,EAAeZ,EAAaP,EAAU6B,SAHjD,4BAQCZ,EACC,mBAAGO,UAAU,OAAb,oDAEA,mCACGT,EACC,2CAEA,cAAC,EAAD,CAAW/B,MAAOA,UCvE9B8C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d75864b9.chunk.js","sourcesContent":["import React from 'react';\nimport { Good } from './types/Good';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods }) => (\n  <ul>\n    {goods.map(good => {\n      const { id, color, name } = good;\n\n      return (\n        <li\n          key={id}\n          data-cy=\"good\"\n          style={{ color }}\n        >\n          {name}\n        </li>\n      );\n    })}\n  </ul>\n);\n","import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nfunction wait(delay: number) {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n\nexport function getAll(): Promise<Good[]> {\n  return wait(250)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n\nexport const get5First = () => {\n  return getAll()\n    .then((goods) => goods\n      .sort(({ name: currentGood }, { name: nextGood }) => (\n        currentGood.localeCompare(nextGood)\n      ))\n      .slice(0, 5));\n};\n\nexport const getRedGoods = () => {\n  return getAll()\n    .then((goods) => goods.filter(({ color }) => color === 'red'));\n};\n","import React, { useState } from 'react';\n\nimport { GoodsList } from './GoodsList';\nimport { Good } from './types/Good';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nimport './App.scss';\n\nenum GoodsType {\n  Default,\n  All,\n  FirstFive,\n  OnlyRed,\n}\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n  const [currentGoodsType, setCurrentGoodsType] = useState(GoodsType.Default);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isLoadingError, setIsLoadingError] = useState(false);\n\n  const getLoadHandler = (\n    getGoods: () => Promise<Good[]>,\n    goodsType = GoodsType.Default,\n  ) => {\n    return () => {\n      if (currentGoodsType !== goodsType) {\n        setIsLoading(true);\n        setIsLoadingError(false);\n        getGoods()\n          .then(setGoods)\n          .catch(() => setIsLoadingError(true))\n          .finally(() => setIsLoading(false));\n        setCurrentGoodsType(goodsType);\n      }\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Dynamic list of Goods</h1>\n\n      <button\n        type=\"button\"\n        data-cy=\"all-button\"\n        onClick={getLoadHandler(getAll, GoodsType.All)}\n      >\n        Load all goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"first-five-button\"\n        onClick={getLoadHandler(get5First, GoodsType.FirstFive)}\n      >\n        Load 5 first goods\n      </button>\n\n      <button\n        type=\"button\"\n        data-cy=\"red-button\"\n        onClick={getLoadHandler(getRedGoods, GoodsType.OnlyRed)}\n      >\n        Load red goods\n      </button>\n\n      {isLoadingError ? (\n        <p className=\"text\">An error occurred while loading goods!</p>\n      ) : (\n        <>\n          {isLoading ? (\n            <p>Loading...</p>\n          ) : (\n            <GoodsList goods={goods} />\n          )}\n        </>\n      )}\n\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}